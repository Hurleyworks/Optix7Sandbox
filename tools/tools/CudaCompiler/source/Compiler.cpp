// This source file was auto-generated by ClassMate++
// Created: 20 Aug 2019 7:49:37 pm
// Copyright (c) 2019, HurleyWorks

#include "Compiler.h"

using mace::FileServices;
using juce::File;
using juce::ChildProcess;

void Compiler::findCudaFiles(const std::string& cudaFolder)
{
	includes.clear();

	StringArray files;
	String wildCard("*.cu*");
	FileServices::getFiles(cudaFolder, files, wildCard);

	for (auto path : files)
	{
		File f(path);
		if (f.existsAsFile())
		{
			cudaFilesToCompile.push_back(path.toStdString());
		}
	}
}

void Compiler::addIncludePath(const std::string& includeFolder)
{
	File folder(includeFolder);
	if (!folder.exists() || !folder.isDirectory()) return;

	includes.push_back("-I" + includeFolder);
}

void Compiler::runNVCC(bool createPtxHeaders)
{
	for (auto cu : cudaFilesToCompile)
	{
		args.clear();

		File f(cu);
		String ptx = ptxOutputFolder + f.getFileNameWithoutExtension() + ".ptx";

		compile(cu, ptx);
	}
}

void Compiler::compile(const String& cudaFile, const String& ptxFile)
{
	args.add(nvccExe);
	args.add(ptx);
	args.add(sdkInclude);
	args.add(util);
	args.add(sdkRoot);

	// add the user added includes
	for (auto i : includes)
	{
		args.add(i);
	}

	args.add(cudaFile);
	args.add(out);
	args.add(ptxFile);

	ChildProcess nvcc;
	nvcc.start(args);

	LOG(DBUG) << nvcc.readAllProcessOutput();
}
