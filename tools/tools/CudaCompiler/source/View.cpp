// This source file was auto-generated by ClassMate++
// Created: 18 Aug 2019 6:10:35 am
// Copyright (c) 2019, HurleyWorks

#include <string>
#include <shlobj.h>
#include "jahley/window/platform/opengl/NanoguiLayer.h"
#include <sabi_core/sabi_core.h>
#include "View.h"

using namespace nanogui;
using juce::String;
using std::cout;
using std::endl;

// ctor
View::View (const PropertyService& properties)
	: properties(properties)
{	
}

// dtor
View::~View ()
{	
}

void View::create(NanoguiLayer* const gui)
{
	this->gui = gui;

	lastSelectedFolder =  properties.renderProps->getVal<std::string>(RenderKey::CommonFolder);
	
	// won't work without changing forward slashes to back slashes
	lastSelectedFolder = lastSelectedFolder.replaceCharacter('/', '\\');
	cudaFolder = lastSelectedFolder;

	Window* window = new Window(gui, "Cuda to Ptx ");
	window->setPosition(Vector2i(15, 15));
	window->setLayout(new GroupLayout());

	Button * resetButton = new Button(window, "Reset");
	resetButton->setBackgroundColor(Color(r, g, b, a));
	resetButton->setCallback([&] {
		emitReset();
		});
	resetButton->setTooltip("Reset the compiler");

    Button * b= new Button(window, "Select Cuda input folder");
	b->setCallback([&] {
		cudaFolder = browseFolder(cudaFolder);
		emitCudaFolder(cudaFolder.toStdString());
		});
	b->setTooltip("Select folder with cuda files to compile");

	b = new Button(window, "Add include folder");
	b->setCallback([&] {
		emitIncludeFolder(browseFolder(optixFrameworkFolder), includeSubfolders);
		});
	b->setTooltip("Add an include path");

	CheckBox* cb = new CheckBox(window, "Inlcude subfolders",
		[&](bool state) {includeSubfolders = state; });
	cb->setChecked(true);

	b = new Button(window, "Select Ptx output folder");
	b->setCallback([&] {
		emitPtxFolder(browseFolder(cudaFolder));
		});
	b->setTooltip("Select ptx output folder");

	b = new Button(window, "run NVCC");
	b->setCallback([&] {
		emitCompile();
		});
	b->setTooltip("Compile cuda files");

	gui->performLayout();
}


// https://stackoverflow.com/questions/12034943/win32-select-directory-dialog-from-c-c
// browseCallbackProc
int CALLBACK  View::browseCallbackProc(HWND hwnd, UINT uMsg, LPARAM lParam, LPARAM lpData)
{
	if (uMsg == BFFM_INITIALIZED)
	{
		SendMessage(hwnd, BFFM_SETSELECTION, TRUE, lpData);
	}

	return 0;
}

// https://stackoverflow.com/questions/12034943/win32-select-directory-dialog-from-c-c
// browseFolder
std::string View::browseFolder(String saved_path)
{
	TCHAR path[MAX_PATH];

	const String title = "Browse for folder...";

	BROWSEINFO bi = { 0 };
	bi.lpszTitle = title.toWideCharPointer();
	bi.ulFlags = BIF_RETURNONLYFSDIRS | BIF_NEWDIALOGSTYLE;
	bi.lpfn = &View::browseCallbackProc;
	bi.lParam = reinterpret_cast<LPARAM>(saved_path.toWideCharPointer());

	LPITEMIDLIST pidl = SHBrowseForFolder(&bi);

	if (pidl != 0)
	{
		//get the name of the folder and put it in path
		SHGetPathFromIDList(pidl, path);

		//free memory used
		IMalloc* imalloc = 0;
		if (SUCCEEDED(SHGetMalloc(&imalloc)))
		{
			imalloc->Free(pidl);
			imalloc->Release();
		}
		String folder(path);

		// remember the last folder chosen
		lastSelectedFolder = folder;

		return folder.toStdString();
	}

	return "";
}