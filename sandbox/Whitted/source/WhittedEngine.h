// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "EngineData.h"

// the bulk of this code is from the Optix7 Whitted sample
class WhittedEngine : public OptixEngine
{

 public:
	WhittedEngine (const PropertyService& properties, const OptixConfig& config);
	~WhittedEngine ();

	void init(CameraHandle& camera) override;
	void render(CameraHandle& camera) override
	{
		//updateBackgroundColor();
	//	OptixEngine::render(camera);
		updateState(camera);
		launchSubframe(camera);
	}

 private:
	WhittedState state;
    unsigned int max_trace = 10;

	bool resize_dirty = false;
	bool camera_changed = true;

	CUDAOutputBuffer<uchar4> output_buffer;

	std::string getPtxString(const std::string& name);

	void createGeomety();
	void createPipeline();
	void createSBT();
	void initLaunchParams();
	
	void updateBackgroundColor();

	void createModules();
	void createCameraProgram( std::vector<OptixProgramGroup>& program_groups);
	void createGlassSphereProgram( std::vector<OptixProgramGroup>& program_groups);
	void createMetalSphereProgram( std::vector<OptixProgramGroup>& program_groups);
	void createFloorProgram( std::vector<OptixProgramGroup>& program_groups);
	void createMissProgram( std::vector<OptixProgramGroup>& program_groups);

	void sphere_bound(float3 center, float radius, float result[6]);
	void parallelogram_bound(float3 v1, float3 v2, float3 anchor, float result[6]);
	void buildGas(const OptixAccelBuildOptions& accel_options,
				const OptixBuildInput& build_input,
				OptixTraversableHandle& gas_handle,
				CUdeviceptr& d_gas_output_buffer);

	void handleCameraUpdate(CameraHandle& camera);
	void syncCameraDataToSbt(const CameraData& camData);

	void launchSubframe(CameraHandle& camera);

	void updateState(CameraHandle& camera);
	void handleResize(WhittedParams& params);

}; // end class WhittedEngine
