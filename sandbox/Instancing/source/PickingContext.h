// This header file was auto-generated by ClassMate++
// Created: 28 Sep 2019 6:48:49 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "optix7_core/optix7_core.h"

class PickingContext : public OptixRenderContext
{
 
 public:
	static OptixRenderContextHandle create(PipelineType type) { return std::make_shared<PickingContext>(type); }

 public:
	PickingContext (PipelineType type);
	~PickingContext ();
		
	void createRaygenRecord(const OptixEngineRef& engine) override;
	void createMissRecord(const OptixEngineRef& engine) override;
	void createEmptyHitGroupRecord(const OptixEngineRef& engine) override;

	void rebuildHitgroupSBT(OptixEngineRef& engine) override;
	void updateCamera(CameraHandle& camera) override;
	void initializeLaunchParams() override;

	void preLaunch(CameraHandle& camera, OptixEngineRef& engine, InputEvent& input) override;
	void launch(OptixEngineRef& engine) override;
	void postLaunch(CameraHandle& camera, OptixEngineRef& engine, InputEvent& input) override;

 private:
	PickParams pickParams;
	uint32_t pickData[2];

	// we're not using camera matrices here
	// so an empty record is ok
	EmptyRecord raygenRecord; 
	const size_t raygenRecordSize = sizeof(EmptyRecord);

	ProgramGroupHandle hitProg = nullptr;
	CUdeviceptr hitgroup_record_base = 0;
	const size_t hitgroup_record_size = sizeof(HitGroupRecord);
	std::vector<HitGroupRecord> hitgroup_records;

	MissRecord missRecord;
	const size_t missRecordSize = sizeof(MissRecord);

}; // end class PickingContext
