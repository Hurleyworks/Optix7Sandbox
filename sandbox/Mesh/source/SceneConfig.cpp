// This source file was auto-generated by ClassMate++
// Created: 29 Aug 2019 3:54:59 pm
// Copyright (c) 2019, HurleyWorks

#include "SceneConfig.h"

using juce::File;


// ctor
SceneConfig::SceneConfig (const PropertyService& properties)
	: properties(properties)
{	
}

// dtor
SceneConfig::~SceneConfig ()
{	
	
}

void SceneConfig::init()
{
	configFolder = String(properties.renderProps->getVal<std::string>(RenderKey::ResourceFolder));
	File f(configFolder);
	if (!f.exists())
		throw std::runtime_error("No resource folder found at " + configFolder.toStdString());

	// context options
	optixConfig.options.context_options.logCallbackFunction = &contextLogger;
	optixConfig.options.context_options.logCallbackLevel = 4;

	// module options
	optixConfig.options.module_compile_options.maxRegisterCount = OPTIX_COMPILE_DEFAULT_MAX_REGISTER_COUNT;
	optixConfig.options.module_compile_options.optLevel = OPTIX_COMPILE_OPTIMIZATION_DEFAULT;
	optixConfig.options.module_compile_options.debugLevel = OPTIX_COMPILE_DEBUG_LEVEL_LINEINFO;

	// pipeline compile options
	optixConfig.options.pipeline_compile_options.usesMotionBlur = false;
	optixConfig.options.pipeline_compile_options.traversableGraphFlags = OPTIX_TRAVERSABLE_GRAPH_FLAG_ALLOW_SINGLE_GAS;
	optixConfig.options.pipeline_compile_options.numPayloadValues = 3;
	optixConfig.options.pipeline_compile_options.numAttributeValues = 3;
	optixConfig.options.pipeline_compile_options.exceptionFlags = OPTIX_EXCEPTION_FLAG_NONE;  // TODO: should be OPTIX_EXCEPTION_FLAG_STACK_OVERFLOW;
	optixConfig.options.pipeline_compile_options.pipelineLaunchParamsVariableName = "params";

	// pipeline line options
	optixConfig.options.pipeline_link_options.maxTraceDepth = 5;
	optixConfig.options.pipeline_link_options.debugLevel = OPTIX_COMPILE_DEBUG_LEVEL_FULL;
	optixConfig.options.pipeline_link_options.overrideUsesMotionBlur = false;

	// acceleration structure options
	optixConfig.options.accel_options.buildFlags = OPTIX_BUILD_FLAG_ALLOW_COMPACTION;
	optixConfig.options.accel_options.operation = OPTIX_BUILD_OPERATION_BUILD;
}

const json & SceneConfig::getProgramGroups()
{
	progGroups["mesh_group"] = {
		{"kind", OPTIX_PROGRAM_GROUP_KIND_HITGROUP},
		{"moduleCH", "programs" },
		{"entryFunctionNameCH", "__closesthit__ch" },
		{"moduleAH", nullptr },
		{"entryFunctionNameAH", nullptr },
		{"moduleIS", nullptr },
		{"entryFunctionNameIS", nullptr } };

	progGroups["camera_group"] = {
		{"kind", OPTIX_PROGRAM_GROUP_KIND_RAYGEN},
		{"module", "programs" },
		{"entryFunctionName", "__raygen__rg" } };

	progGroups["miss_group"] = {
		{"kind", OPTIX_PROGRAM_GROUP_KIND_MISS},
		{"module", "programs" },
		{"entryFunctionName", "__miss__ms" } };

	return progGroups;
}
