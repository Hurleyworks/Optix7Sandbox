// This header file was auto-generated by ClassMate++
// Created: 2 Sep 2019 5:16:51 am
// Copyright (c) 2019, HurleyWorks

#pragma  once

#include <sabi_core/sabi_core.h>
#include <igl/read_triangle_mesh.h>

using juce::File;
using juce::StringArray;
using juce::String;
using sabi::Surface;
using sabi::MeshBuffers;
using sabi::MeshBuffersHandle;

using igl::read_triangle_mesh;

using LoadMeshCallback = std::function<void(MeshBuffersHandle)>;

class ActiveLoader 
{

 public:
	ActiveLoader() = default;
	~ActiveLoader() = default;
	
	void loadMesh(const std::string& path, LoadMeshCallback& callback)
	{
		File f(path);

		Eigen::MatrixXd V;
		Eigen::MatrixXi F;
		if (!read_triangle_mesh(path, V, F))
		{
			LOG(CRITICAL) << "load mesh failed for: " << path;
			return;
		}

		MeshBuffersHandle m = std::make_shared<MeshBuffers>();
		m->V = V.transpose().cast<float>(); // Libigl needs to be transposed

		MatrixXu indices = F.cast<unsigned>();

		Surface s;
		s.indices() = indices.transpose(); // Libigl needs to be transposed
		m->S.push_back(s);

		callback(m);
	}

}; // end class ActiveLoader
