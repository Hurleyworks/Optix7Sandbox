// This source file was auto-generated by ClassMate++
// Created: 31 Aug 2019 5:31:43 am
// Copyright (c) 2019, HurleyWorks

#include "Renderer.h"

using sabi::PixelBuffer;

// ctor
Renderer::Renderer (unsigned int screenWidth, unsigned int screenHeight)
	: OptixRenderer(screenWidth, screenHeight)
{	
	renderBuffer.init(CUDAOutputBufferType::ZERO_COPY, screenWidth, screenHeight);

	params.image_width = width;
	params.image_height = height;
	params.origin_x = width / 2;
	params.origin_y = height / 2;

	CUDA_CHECK(cudaMalloc(reinterpret_cast<void**>(&deviceParams), sizeof(Params)));
	CUDA_CHECK(cudaStreamCreate(&stream));;
}

// dtor
Renderer::~Renderer ()
{	
	try
	{
		if (deviceParams)
			CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceParams)));
	}
	catch (const std::runtime_error& e)
	{
		LOG(CRITICAL) << e.what();
	}
	catch (...)
	{
		LOG(CRITICAL) << "Caught unknow exception";
	}
}

void Renderer::resize(unsigned int screenWidth, unsigned int screenHeight)
{
	// FIXME
	params.image_width = width;
	params.image_height = height;
	params.origin_x = width / 2;
	params.origin_y = height / 2;
}

void Renderer::render(CameraHandle& camera, OptixEngineRef& engine)
{
	if (!ok) return;

	try
	{
		params.image = renderBuffer.map();
		params.handle = engine->getIAS();

		CUDA_CHECK(cudaMemcpy(
			reinterpret_cast<void*>(deviceParams),
			&params, sizeof(params),
			cudaMemcpyHostToDevice
		));

		OPTIX_CHECK(optixLaunch(engine->getPipeline(), stream, deviceParams, sizeof(Params), engine->getSBT(), width, height, 1));
		CUDA_SYNC_CHECK();

		renderBuffer.unmap();

		// capture the Optix render 
		PixelBuffer& pixels = camera->getPixelBuffer();
		std::memcpy(pixels.uint8Pixels.data(), renderBuffer.getHostPointer(), pixels.byteCountUint8());
	}
	catch (const std::runtime_error& e)
	{
		LOG(CRITICAL) << e.what();
		ok = false;
	}
	catch (const std::bad_alloc& e)
	{
		ok = false;
		LOG(CRITICAL) << e.what();
	}
	catch (...)
	{
		ok = false;
		LOG(CRITICAL) << "Caught unknow exception";
	}
	
}

