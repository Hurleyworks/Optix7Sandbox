// This source file was auto-generated by ClassMate++
// Created: 18 Aug 2019 6:10:35 am
// Copyright (c) 2019, HurleyWorks

#include "jahley/window/platform/opengl/NanoguiLayer.h"
#include <sabi_core/sabi_core.h>

#include "View.h"

using namespace nanogui;
using juce::String;
using std::cout;
using std::endl;

// ctor
View::View (const PropertyService& properties)
	: properties(properties)
{	
}

// dtor
View::~View ()
{	
}

void View::create(NanoguiLayer* const gui)
{
	this->gui = gui;

	auto ctx = gui->nvgContext();

	Window* window = new Window(gui, "Button demo");
	window->setPosition(Vector2i(15, 15));
	window->setLayout(new GroupLayout());

	/* No need to store a pointer, the data structure will be automatically
	   freed when the parent window is deleted */
	new Label(window, "Push buttons", "sans-bold");

	Button* b = new Button(window, "Plain button");
	b->setCallback([&] { cout << "pushed!" << endl; });
	b->setTooltip("short tooltip");

	/* Alternative construction notation using variadic template */
	b = window->add<Button>("Styled", ENTYPO_ICON_ROCKET);
	b->setBackgroundColor(Color(0, 0, 255, 25));
	b->setCallback([&] { cout << "pushed!" << endl; });
	b->setTooltip("This button has a fairly long tooltip. It is so long, in "
		"fact, that the shown text will span several lines.");

	new Label(window, "Toggle buttons", "sans-bold");
	b = new Button(window, "Toggle me");
	b->setFlags(Button::ToggleButton);
	b->setChangeCallback([](bool state) { cout << "Toggle button state: " << state << endl; });

	new Label(window, "Radio buttons", "sans-bold");
	b = new Button(window, "Radio button 1");
	b->setFlags(Button::RadioButton);
	b = new Button(window, "Radio button 2");
	b->setFlags(Button::RadioButton);



	Button* about = new Button(window->buttonPanel(), "", ENTYPO_ICON_INFO);
	about->setCallback([&, ctx]() {
		std::string msg = getSceneInfo().joinIntoString("\n").toStdString();
		auto dlg = new MessageDialog(
			gui, MessageDialog::Type::Information, "Scene Info", msg);
		dlg->messageLabel()->setFixedWidth(550);
		dlg->messageLabel()->setFontSize(20);
		gui->performLayout();
		dlg->center();
		});

	gui->performLayout();
}

const StringArray View::getSceneInfo()
{
	StringArray message;

	uint64_t totalMeshes = properties.worldProps->getVal<uint64_t>(WorldKey::TotalMeshes);
	uint64_t totalInstances = properties.worldProps->getVal<uint64_t>(WorldKey::TotalInstances);
	uint64_t totalInstancedTriangles = properties.worldProps->getVal<uint64_t>(WorldKey::TotalInstancedTriangles);
	uint64_t totalTriangles = properties.worldProps->getVal<uint64_t>(WorldKey::TotalRealTriangles);

	message.add(String("Total meshes: ") + String(totalMeshes));
	message.add(String("Total instances: ") + String(totalInstances));
	message.add(String("Total mesh triangles: ") + String(totalTriangles));
	message.add(String("Total instanced triangles: ") + String(totalInstancedTriangles));

	return message;
}