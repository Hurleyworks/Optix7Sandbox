// This source file was auto-generated by ClassMate++
// Created: 18 Aug 2019 6:10:35 am
// Copyright (c) 2019, HurleyWorks

#include "jahley/window/platform/opengl/NanoguiLayer.h"
#include <sabi_core/sabi_core.h>

#include "View.h"

using namespace nanogui;
using juce::String;
using std::cout;
using std::endl;

// ctor
View::View (const PropertyService& properties)
	: properties(properties)
{	
}

// dtor
View::~View ()
{	
}

void View::create(NanoguiLayer* const gui)
{
	this->gui = gui;

	auto ctx = gui->nvgContext();
	nvgCtx = ctx;

	Window* window = new Window(gui, "Hello Optix");
	window->setPosition(Vector2i(15, 15));
	window->setLayout(new GroupLayout());

	new Label(window, "Background color:", "sans-bold");
	auto cp = new ColorPicker(window, { 51, 56, 61, 255 });
	cp->setFixedSize({ 100, 20 });
	cp->setCallback([&](const Color& c) {
		Eigen::Vector4f bg(c.r(), c.g(), c.b(), c.w());
		properties.renderProps->setValue(RenderKey::BackgroundColor, bg);
		});

	cp->setFinalCallback([&](const Color& c) {
		Eigen::Vector4f bg(c.r(), c.g(), c.b(), c.w());
		properties.renderProps->setValue(RenderKey::BackgroundColor, bg);
		});

	Button * about = new Button(window->buttonPanel(), "", ENTYPO_ICON_INFO);
	about->setCallback([=]() {
		std::string msg = getSceneInfo().joinIntoString("\n").toStdString();
		auto dlg = new MessageDialog(
			gui, MessageDialog::Type::Information, "Scene Info", msg);
		dlg->messageLabel()->setFixedWidth(550);
		dlg->messageLabel()->setFontSize(20);
		gui->performLayout();
		dlg->center();
		});

	gui->performLayout();
}

const StringArray View::getSceneInfo()
{
	StringArray message;

	uint64_t totalMeshes = properties.worldProps->getVal<uint64_t>(WorldKey::TotalMeshes);
	uint64_t totalInstances = properties.worldProps->getVal<uint64_t>(WorldKey::TotalInstances);
	uint64_t totalInstancedTriangles = properties.worldProps->getVal<uint64_t>(WorldKey::TotalInstancedTriangles);
	uint64_t totalTriangles = properties.worldProps->getVal<uint64_t>(WorldKey::TotalRealTriangles);

	message.add(String("Total meshes: ") + String(totalMeshes));
	message.add(String("Total instances: ") + String(totalInstances));
	message.add(String("Total mesh triangles: ") + String(totalTriangles));
	message.add(String("Total instanced triangles: ") + String(totalInstancedTriangles));

	return message;
}