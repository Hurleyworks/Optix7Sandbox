// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "LaunchParams.h"

class OptixScene : public OptixEngine
{
	using RaygenRecord = SbtRecord<RayGenData>;
	using MissRecord = SbtRecord<MissData>;
	using HitGroupRecord = SbtRecord<HitGroupSBT>;

 public:
	OptixScene (const PropertyService& properties, const OptixConfig& config);
	~OptixScene ();

	void init(CameraHandle& camera, const json& groups) override;
	void addRenderable(RenderableNode& node) override;

	void render(CameraHandle& camera) override
	{		
		// update app settings on gpu
		syncCamera(camera);
		syncBackgoundColor();
		
		renderer->render(camera, OptixEngine::getPtr());
	}
	
 private:
	RendererHandle renderer = nullptr;
	
	std::vector<OptixMeshHandle> meshes;

	CUdeviceptr deviceIASoutputBuffer = 0;
	CUdeviceptr hitgroup_record_base = 0;
	const size_t hitgroup_record_size = sizeof(HitGroupRecord);
	std::vector<HitGroupRecord> hitgroup_records;

	// SBT records
	RaygenRecord raygenRecord;
	const size_t raygenRecordSize = sizeof(RaygenRecord);
	MissRecord missRecord;
	//HitGroupRecord hitgroupSBT;

	void createRaygenRecord(CameraHandle& camera);
	void createMissRecord();
	void createHitRecord();

	void rebuildSceneAccel();
	void updateSBT(OptixMeshHandle mesh);
	void buildSBT(CameraHandle& camera) override;
	void updateCamera(CameraHandle& camera);

	// sync app settings with device
	void syncCamera(CameraHandle& camera);
	void syncBackgoundColor();

}; // end class OptixScene
