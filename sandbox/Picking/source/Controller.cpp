// This source file was auto-generated by ClassMate++
// Created: 18 Aug 2019 6:10:35 am
// Copyright (c) 2019, HurleyWorks

#include "Controller.h"

using Eigen::Vector2f;
using Eigen::Vector3f;
using wabi::Ray3f;

// ctor
Controller::Controller (const PropertyService& properties)
	: properties(properties)
{	
}

void Controller::onInput(InputEvent& e, CameraHandle& camera)
{
	mouseCoords = Vector2f(e.getX(), e.getY());

	switch (e.getType())
	{
		case InputEvent::Press:
		{
			if (e.getButton() == InputEvent::Left)
			{
				camera->startTracking();
				camera->track(Vector2f(e.getX(), e.getY()));
			}
			else if (e.getButton() == InputEvent::Right)
			{
				Ray3f ray = camera->generateRay(mouseCoords, camera->getScreenSize());
				e.setPickRay(ray);
			}
			break;
		}

		case InputEvent::Release:
		{
			camera->setDirty(false);
			break;
		}

		case InputEvent::Move:
			break;

		case InputEvent::ScrollUp:
			camera->zoom(DEFAULT_ZOOM_FACTOR);
			properties.renderProps->setValue(RenderKey::ResetAccumulator, true);
			camera->setDirty(true);
			break;

		case InputEvent::ScrollDown:
			camera->zoom(DEFAULT_ZOOM_FACTOR * -1);
			properties.renderProps->setValue(RenderKey::ResetAccumulator, true);
			camera->setDirty(true);
			break;

		case InputEvent::Drag:

			// LB for camera, RMB for picking
			if (e.getButton() == InputEvent::Left)
			{
				camera->track(Vector2f(e.getX(), e.getY()));
				camera->setDirty(true);
				properties.renderProps->setValue(RenderKey::ResetAccumulator, true);
			}
			else if (e.getButton() == InputEvent::Right)
			{
				Ray3f ray = camera->generateRay(mouseCoords, camera->getScreenSize());
				e.setPickRay(ray);
			}
		
			break;
	}
}

