// This source file was auto-generated by ClassMate++
// Created: 31 Aug 2019 5:31:43 am
// Copyright (c) 2019, HurleyWorks

#include "Renderer.h"

using sabi::PixelBuffer;
using wabi::Ray3f;
using Eigen::Vector3f;

// ctor
Renderer::Renderer (unsigned int screenWidth, unsigned int screenHeight)
	: OptixRenderer(screenWidth, screenHeight)
{	
	renderBuffer.init(CUDAOutputBufferType::ZERO_COPY, screenWidth, screenHeight);

	/*params.image_width = width;
	params.image_height = height;
	params.origin_x = width / 2;
	params.origin_y = height / 2;*/

	
	
}

// dtor
Renderer::~Renderer ()
{	
	try
	{
		/*if (deviceParams)
			CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceParams)));*/
	}
	catch (const std::runtime_error& e)
	{
		LOG(CRITICAL) << e.what();
	}
	catch (...)
	{
		LOG(CRITICAL) << "Caught unknow exception";
	}
}

void Renderer::resize(unsigned int screenWidth, unsigned int screenHeight)
{
	// FIXME
	/*params.image_width = width;
	params.image_height = height;
	params.origin_x = width / 2;
	params.origin_y = height / 2;*/
}

void Renderer::render(CameraHandle& camera, OptixEngineRef& engine)
{
	for (auto renderContext : renderQueue)
	{
		renderContext->updateCamera(camera);
		renderContext->preLaunch(camera, engine);
	}

	renderAll(engine);

	for (auto renderContext : renderQueue)
	{
		renderContext->postLaunch(camera, engine);
	}

}

