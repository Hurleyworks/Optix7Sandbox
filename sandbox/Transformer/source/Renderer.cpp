// This source file was auto-generated by ClassMate++
// Created: 31 Aug 2019 5:31:43 am
// Copyright (c) 2019, HurleyWorks

#include "Renderer.h"

using sabi::PixelBuffer;
using wabi::Ray3f;
using Eigen::Vector3f;

// ctor
Renderer::Renderer (unsigned int screenWidth, unsigned int screenHeight)
	: OptixRenderer(screenWidth, screenHeight)
{	
}

// dtor
Renderer::~Renderer ()
{	
	
}

void Renderer::resize(unsigned int screenWidth, unsigned int screenHeight)
{

}

void Renderer::render(CameraHandle& camera, OptixEngineRef& engine, InputEvent& input)
{
	for (auto renderContext : renderQueue)
	{
		renderContext->updateCamera(camera);

		if (renderContext->getType() == PipelineType::Dreamer)
		{
			bool picking = renderContext->preLaunch(camera, engine, input);
			if(picking)	
			{ 
				// launch for picking
				renderContext->setLaunchDimensions(Vector3i(1, 1, 1));
				renderContext->launch(engine);
				renderContext->postLaunch(camera, engine, input);

				// launch for rendering
				renderContext->setLaunchDimensions(Vector3i(camera->getScreenWidth(), camera->getScreenHeight(), 1));
				renderContext->launch(engine);
				renderContext->postLaunch(camera, engine, input);
			}
			else 
			{
				// launch for rendering
				renderContext->setLaunchDimensions(Vector3i(camera->getScreenWidth(), camera->getScreenHeight(), 1));
				renderContext->launch(engine);
				renderContext->postLaunch(camera, engine, input);
			}
		}
	}
}

