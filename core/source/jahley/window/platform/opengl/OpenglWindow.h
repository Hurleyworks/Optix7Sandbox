// This header file was auto-generated by ClassMate++
// Created: 1 Aug 2019 10:48:43 am
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "OpenglUtil.h"

using Eigen::Vector2i;
using Eigen::Vector4f;
using sabi::PixelBuffer;
using OpenglWindowHandle = std::unique_ptr<class OpenglWindow>;

class InputHandler;

class OpenglWindow
{

 public:
	OpenglWindow (InputHandler & input);
	~OpenglWindow ();

	void renderBegin(const Vector4f & clearColor);
	void renderImage(ImagePixels&& pixels, const ImageInfo& spec);
	void renderImage(PixelBuffer && pixelBuffer);
	void renderEnd(bool wait);

	void create(const Vector2i & size, const std::string & caption,
				bool resizable = true, bool fullscreen = false, int colorBits = 8,
				int alphaBits = 8, int depthBits = 24, int stencilBits = 8,
				int nSamples = 0, unsigned int glMajor = 4, unsigned int glMinor = 3);

	InputHandler& getInput() { return input; }
	GLFWwindow* glfw() const { return window; }

 private:
	 InputHandler & input;
	 GLFWwindow * window = nullptr;
	 NVGcontext * nanovgContext = nullptr;
	 bool gladInitialized = false;

	 // full screen texture for displaying
	 // renders and other images
	 OpenglUtil::FullScreenQuad quad;
	 ImagePixels imagePixels;
	 GLuint textureID = 0;
	 
	 // handle window events here
	 void onWindowFocus(int focused);
	 void onWindowResize(int width, int height);
	 void onWindowClose();
	
}; // end class OpenglWindow
