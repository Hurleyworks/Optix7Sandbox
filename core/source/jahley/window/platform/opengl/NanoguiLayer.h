// This header file was auto-generated by ClassMate++
// Created: 17 Aug 2019 3:42:21 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "Performance.h"
#include "../../RenderLayer.h"

class NanoguiLayer : public RenderLayer, public nanogui::Screen
{

 public:
	NanoguiLayer (GLFWwindow* window, const PropertyService& properties, CameraHandle camera = nullptr);
	~NanoguiLayer ();

	void draw(NVGcontext* ctx) override
	{
		//if (attached)
			Screen::draw(ctx);
	}

	void drawContents() override
	{
	//	if (attached)
		if(properties.renderProps->getVal<bool>(RenderKey::ShowPerformanceGraph))
			drawPerformanceGraph(mNVGContext);
	}

	void onUpdate() override;
	bool onInput(const InputEvent& input) override;

	void postInfoMessage(const std::string& title, const std::string& msg) override;
	void postWarningMessage(const std::string& title, const std::string& msg) override;
	void postQuestiongMessage(const std::string& title, const std::string& msg) override;

 private:
	GLFWwindow* window = nullptr;

	void init();

	// performance graph
	GPUtimer gpuTimer;
	PerfGraph fpsGraph, cpuGraph, gpuGraph;
	double previousTime = 0, cpuTime = 0;
	void drawPerformanceGraph(NVGcontext* const ctx);

}; // end class NanoguiLayer
