// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "OptixUtil.h"

using OptixContexHandle = std::shared_ptr<class OptixContext>;

class OptixContext
{

 public:
	static OptixContexHandle create() { return std::make_shared< OptixContext>(); }

 public:
	OptixContext()
	{
		try
		{
			// Initialize CUDA
			CUDA_CHECK(cudaFree(0));

			CUcontext cuCtx = 0;  // zero means take the current context
			OPTIX_CHECK(optixInit());
			options.logCallbackFunction = &contextLogger;
			options.logCallbackLevel = 4;
			OPTIX_CHECK(optixDeviceContextCreate(cuCtx, &options, &context));
		}
		catch (std::exception& e)
		{
			LOG(CRITICAL) << "Caught exception: " << e.what();
		}
	}
	~OptixContext()
	{
		try
		{
			OPTIX_CHECK(optixDeviceContextDestroy(context));
		}
		catch (std::exception& e)
		{
			LOG(CRITICAL) << "Caught exception: " << e.what();
		}
	}

	OptixDeviceContext operator -> ()
	{
		if (context)
			return context;
		else
			throw std::runtime_error("OptixDeviceContext in invalid(nullptr)");
	}

 private:
	OptixDeviceContext context = nullptr;
	OptixDeviceContextOptions options = {};
};