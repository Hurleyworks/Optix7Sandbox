
// This header file was auto-generated by ClassMate++
// Created: 1 Aug 2019 10:48:43 am
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "InputEvent.h"

// map from GLFW
#define MOUSE_BUTTON_1         0
#define MOUSE_BUTTON_2         1
#define MOUSE_BUTTON_3         2
#define MOUSE_BUTTON_4         3
#define MOUSE_BUTTON_5         4
#define MOUSE_BUTTON_6         5
#define MOUSE_BUTTON_7         6
#define MOUSE_BUTTON_8         7
#define MOUSE_BUTTON_LAST      MOUSE_BUTTON_8
#define MOUSE_BUTTON_LEFT      MOUSE_BUTTON_1
#define MOUSE_BUTTON_RIGHT     MOUSE_BUTTON_2
#define MOUSE_BUTTON_MIDDLE    MOUSE_BUTTON_3

#define MOUSE_RELEASE                0
#define MOUSE_PRESS                  1
#define MOUSE_REPEAT                 2

using juce::File;
using juce::StringArray;
using juce::String;
using mace::FileServices;

class InputHandler
{

 public:
	InputHandler() = default;
	~InputHandler() = default;

	bool windowIsOpen() const { return windowOpen; }
	void onWindowClose() {windowOpen = false;}

	void onCursorPos(double xPos, double yPos)
	{
		input.setX(xPos);
		input.setY(yPos);

		InputEvent::Type type = input.getType();
		if (type == InputEvent::Type::Press || type == InputEvent::Drag)
		{
			input.setType(InputEvent::Drag);

			LOG(DBUG) << "Dragging at: " << input.getX() << ", " << input.getY();
		}
		else
		{
			input.setType(InputEvent::Move);
		}
	}

	void onMouseButtonEvent(int button, int action, int mods)
	{
		switch (button)
		{
			case MOUSE_BUTTON_LEFT:
				input.setButton(InputEvent::MouseButton::Left);
				break;
			case MOUSE_BUTTON_RIGHT:
				input.setButton(InputEvent::MouseButton::Right);
				break;
			case MOUSE_BUTTON_MIDDLE:
				input.setButton(InputEvent::MouseButton::Middle);
				break;
			default:
				break;
		}
			
		switch (action)
		{
			case MOUSE_PRESS:
				input.setType(InputEvent::Press);
				break;
			case MOUSE_RELEASE:
				input.setType(InputEvent::Release);
				break;
			case MOUSE_REPEAT:
				input.setType(InputEvent::DblClick); // FIXME is this correct?
				break;
			default:
				break;
		}
	}

	void onDrop(const std::vector<std::string> & fileList)
	{
		for (auto p : fileList)
		{
			File f(p);
			if (f.isDirectory())
			{
				StringArray files;
				String wildCard("*.*");
				FileServices::getFiles(f.getFullPathName(), files, wildCard);

				for (auto path : files)
				{
					File f(path);
					std::string filename = f.getFullPathName().toStdString();
					LOG(DBUG) << filename;
				}
			}
			else if (f.existsAsFile())
			{
				std::string filename = f.getFullPathName().toStdString();
				LOG(DBUG) << filename;
			}
		}
	}

 private:
	InputEvent input;
	bool windowOpen = true;
};