// This header file was auto-generated by ClassMate++
// Created: 26 Jan 2019 8:47:47 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

#include "Log.h"
#include "window/WindowData.h"
#include "window/InputHandler.h"
#include "window/platform/opengl/OpenglWindow.h"
#include "window/RenderStack.h"
#include "window/platform/opengl/NanoguiLayer.h"


namespace Jahley
{ 
	class App : public CsSignal::SlotBase
	{
	  public:
		virtual ~App();

		virtual void run();
		virtual void update() {}
		virtual void onInit() {}
		virtual void onCrash() {}
		virtual void onInput(const InputEvent& e) {}
		virtual void onDrop(const std::vector<std::string>& fileList) {}

		bool isWindowApp() const { return windowApp; }

		// rendering
		void pushLayer(RenderLayerRef layer, bool attach);
		void pushOverlay(RenderLayerRef layer, bool attach);
		bool saveScreen(const std::string& appName);

		// slot 
		void onInputEvent(const InputEvent & e);

		// crash handling
		void preCrash();
		void onFatalError(g3::FatalMessagePtr fatal_message);

		
	  protected:
		App(DesktopWindowSettings settings = DesktopWindowSettings(), bool windowApp = false);
		bool isRunning = true;
		InputHandler input;
		OpenglWindowHandle window;
		PropertyService properties;
		CameraHandle camera = nullptr;

		bool captureScreen = false;
		bool captureRender = false;

		std::chrono::time_point<std::chrono::system_clock> startTime = std::chrono::system_clock::now();

	  private:
		bool windowApp = false;
		FatalErrorCallback errorCallback = nullptr;
		PreCrashCallback preCrashCallback = nullptr;
		
		LogHandler log;
		int refreshRate = DEFAULT_DESKTOP_WINDOW_REFRESH_RATE; // 60 fps
		std::chrono::milliseconds refreshTime;
		
		RenderStack layers;

		void resetProperties();
		
	}; // end class App

	// Implemented by client
	App* CreateApplication();
}