// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

// FIXME surely this is not going to be common for all projects
struct Params
{
	uchar4* image;
	uint32_t               image_width;
	uint32_t               image_height;
	int32_t                origin_x;
	int32_t                origin_y;
	OptixTraversableHandle handle;
};


using ContextHandle = std::shared_ptr<class OptixContext>;

class OptixContext
{

 public:
	static ContextHandle create(const OptixDeviceContextOptions & options) { return std::make_shared<OptixContext>(options); }

 public:
	OptixContext(const OptixDeviceContextOptions& options)
	{
		try
		{
			// Initialize CUDA
			CUDA_CHECK(cudaFree(0));

			CUcontext cuCtx = 0;  // zero means take the current context
			OPTIX_CHECK(optixInit());
			OPTIX_CHECK(optixDeviceContextCreate(cuCtx, &options, &context));
		}
		catch (std::exception& e)
		{
			LOG(CRITICAL) << "Caught exception: " << e.what();

			if (context)
				OPTIX_CHECK(optixDeviceContextDestroy(context));

			context = nullptr;
	
		}
	}
	~OptixContext()
	{
		LOG(DBUG) << _FN_;

		try
		{
			if(context)
				OPTIX_CHECK(optixDeviceContextDestroy(context));
		}
		catch (std::exception& e)
		{
			LOG(CRITICAL) << "Caught exception: " << e.what();
		}
	}

	OptixDeviceContext get()
	{
		if (context)
			return context;
		else
			throw std::runtime_error("OptixDeviceContext is invalid(nullptr)");
	}

	OptixDeviceContext operator -> ()
	{
		if (context)
			return context;
		else
			throw std::runtime_error("OptixDeviceContext is invalid(nullptr)");
	}


 private:
	OptixDeviceContext context = nullptr;
};

