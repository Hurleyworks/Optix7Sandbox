
// This source file was auto-generated by ClassMate++
// Created: 12 Sep 2019 6:29:23 am
// Copyright (c) 2019, HurleyWorks


// ctor
OptixAccel::OptixAccel ()
{	
	
}

// dtor
OptixAccel::~OptixAccel ()
{	
	try
	{
		if (deviceIASoutputBuffer)
			CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceIASoutputBuffer)));
	}
	catch (const std::runtime_error& e)
	{
		LOG(CRITICAL) << e.what();
	}
	catch (...)
	{
		LOG(CRITICAL) << "Caught unknow exception";
	}
}

void OptixAccel::rebuildSceneAccel(ContextHandle& context,const SceneMeshes& meshes)
{
	const size_t instanceCount = meshes.size();

	// out with the old buffer
	if (deviceIASoutputBuffer)
		CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceIASoutputBuffer)));

	std::vector<OptixInstance> optixInstances(instanceCount);

	unsigned int sbtOffset = 0;
	for (size_t i = 0; i < meshes.size(); ++i)
	{
		auto& mesh = meshes[i];
		auto& optixInstance = optixInstances[i];
		memset(&optixInstance, 0, sizeof(OptixInstance));

		optixInstance.flags = OPTIX_INSTANCE_FLAG_NONE;
		optixInstance.instanceId = static_cast<unsigned int>(mesh->getNode()->getClientID());
		optixInstance.sbtOffset = sbtOffset;
		optixInstance.visibilityMask = 1;
		optixInstance.traversableHandle = mesh->getGAS();
		memcpy(optixInstance.transform, mesh->getWorldTransform().data(), sizeof(float) * 12);

		// FIXME what should this really be???
		const int FIXME = 1; 
		sbtOffset += FIXME * WHITTED_RAY_TYPE_COUNT;
	}

	const size_t instancesSizeInBytes = sizeof(OptixInstance) * instanceCount;
	CUdeviceptr  deviceInstances;
	CUDA_CHECK(cudaMalloc(reinterpret_cast<void**>(&deviceInstances), instancesSizeInBytes));
	CUDA_CHECK(cudaMemcpy(
		reinterpret_cast<void*>(deviceInstances),
		optixInstances.data(),
		instancesSizeInBytes,
		cudaMemcpyHostToDevice
	));

	OptixAccelBuildOptions accelOptions = {};
	accelOptions.buildFlags = OPTIX_BUILD_FLAG_NONE;
	accelOptions.operation = OPTIX_BUILD_OPERATION_BUILD;

	OptixBuildInput instanceInput = {};
	instanceInput.type = OPTIX_BUILD_INPUT_TYPE_INSTANCES;
	instanceInput.instanceArray.instances = deviceInstances;
	instanceInput.instanceArray.numInstances = static_cast<unsigned int>(instanceCount);

	OptixAccelBufferSizes IASbufferSizes;
	OPTIX_CHECK(optixAccelComputeMemoryUsage(
		context->get(),
		&accelOptions,
		&instanceInput,
		1, // num build inputs
		&IASbufferSizes
	));

	CUdeviceptr deviceTempBuffer;
	CUDA_CHECK(cudaMalloc(
		reinterpret_cast<void**>(&deviceTempBuffer),
		IASbufferSizes.tempSizeInBytes
	));
	CUDA_CHECK(cudaMalloc(
		reinterpret_cast<void**>(&deviceIASoutputBuffer),
		IASbufferSizes.outputSizeInBytes
	));

	OPTIX_CHECK(optixAccelBuild(
		context->get(),
		nullptr,                  // CUDA stream
		&accelOptions,
		&instanceInput,
		1,                  // num build inputs
		deviceTempBuffer,
		IASbufferSizes.tempSizeInBytes,
		deviceIASoutputBuffer,
		IASbufferSizes.outputSizeInBytes,
		&sceneAccel,
		nullptr,            // emitted property list
		0                   // num emitted properties
	));

	CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceTempBuffer)));
	CUDA_CHECK(cudaFree(reinterpret_cast<void*>(deviceInstances)));
}

