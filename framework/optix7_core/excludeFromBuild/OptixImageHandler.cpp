
// This header file was auto-generated by ClassMate++
// Created: 26 Sep 2019 2:36:23 pm
// Copyright (c) 2019, HurleyWorks


OptixImageHandler::OptixImageHandler()
{
}

OptixImageHandler::~OptixImageHandler()
{
}

void OptixImageHandler::addImage(PixelBufferHandle& image)
{
	LOG(DBUG) << _FN_;

	// Allocate CUDA array in device memory
	int32_t pitch;
	cudaChannelFormatDesc channel_desc;
	if (image->uint8Pixels.size())
	{
		pitch = image->spec.width * image->spec.channels * sizeof(uint8_t);
		channel_desc = cudaCreateChannelDesc<uchar4>();
	}
	else
	{
		throw  std::runtime_error("OptixImageHandler received empty image");
	}
	
	cudaArray_t   cuda_array = nullptr;
	CUDA_CHECK(cudaMallocArray(
		&cuda_array,
		&channel_desc,
		image->spec.width,
		image->spec.height
	));
	CUDA_CHECK(cudaMemcpy2DToArray(
		cuda_array,
		0,     // X offset
		0,     // Y offset
		image->uint8Pixels.data(),
		pitch,
		pitch,
		image->spec.height,
		cudaMemcpyHostToDevice
	));

	images.push_back(cuda_array);
}
