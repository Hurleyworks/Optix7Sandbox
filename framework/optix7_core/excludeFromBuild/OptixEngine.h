// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

using OptixEngineRef = std::shared_ptr<class OptixEngine>;

using juce::StringArray;
using juce::String;
using sabi::CameraHandle;
using sabi::RenderableNode;
using sabi::PixelBufferHandle;
using sabi::Images;

class OptixEngine : public std::enable_shared_from_this<OptixEngine>, protected Noncopyable
{
	
 public:
	OptixEngineRef getPtr() { return shared_from_this(); }

	using ProgramDB = std::unordered_map<String, PtxData>;
	using Modules = std::unordered_map<String, ModuleHandle>;
	using HitGroupPair = std::pair<ModuleHandle, String>;
	using HitGroupData = std::vector<HitGroupPair>;
	using PipelineDB = std::unordered_map<std::string, PipelineHandle>;

 public:
	virtual ~OptixEngine ();

	virtual void init(CameraHandle& camera) = 0;
	virtual void addPipeline(PipelineType type, const json& groups, OptixConfig& config) = 0;
	virtual void render(CameraHandle& camera) = 0;
	virtual void clearScene() = 0;
	virtual void addRenderable(RenderableNode& node) {}
	virtual void addImage(PixelBufferHandle& image) {}

	const OptixPipeline getPipeline(std::string& name) const
	{
		auto it = pipelineDB.find(name);
		return it == pipelineDB.end() ? nullptr : it->second->get();
	}

	const OptixEngine::ProgramDB& getProgramDB() const { return programDB; }
	const OptixTraversableHandle& getGAS() const { return gAccel; }
	const OptixTraversableHandle& getIAS() const { return sceneAccel; }

	bool restartRender() const { return properties.renderProps->getVal<bool>(RenderKey::ResetAccumulator); }
	void setRenderRestart(bool state) const {properties.renderProps->setValue(RenderKey::ResetAccumulator, state);}
	const PropertyService& props() const { return properties; }

 protected:
	OptixEngine(const PropertyService& properties);

	PropertyService properties;
	OptixDeviceContextOptions context_options = {};

	StringArray progFuncNames;  
	StringArray programPrefixes;
	ProgramDB programDB;
	Modules modules;

	ContextHandle context = nullptr;
    PipelineDB pipelineDB;
	OptixTraversableHandle sceneAccel= 0; 
	OptixTraversableHandle gAccel = 0;

	PipelineHandle createPipeline(const json& groups, OptixConfig& config);
	void createProgramDatabase();

private:
	ModuleHandle createModule(PtxData& data, OptixConfig& config);

	ProgramGroupHandle createRaygenPrograms(ModuleHandle& module, const String& functionName, OptixConfig& config);
	ProgramGroupHandle createMissPrograms(ModuleHandle& module, const String& functionName, OptixConfig& config);
	ProgramGroupHandle createHitgroupPrograms(const HitGroupData & hitgroupData, OptixConfig& config);
	
	void createProgramGroups(const json & groups, OptixConfig& config);
	void createProgramGroup(const json& j, OptixConfig& config);

	String extractProgramFunctionName(const String& line, const String& prefix);

}; // end class OptixEngine
