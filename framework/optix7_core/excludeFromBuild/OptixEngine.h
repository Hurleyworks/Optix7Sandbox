// This header file was auto-generated by ClassMate++
// Created: 18 Aug 2019 4:00:14 pm
// Copyright (c) 2019, HurleyWorks

#pragma once

using OptixEngineRef = std::shared_ptr<class OptixEngine>;

class OptixEngine
{

 public:
	virtual ~OptixEngine ();

	virtual void init(CameraHandle& camera) = 0;
	virtual void render(CameraHandle& camera)
	{
		renderer.render(camera, gas_handle, pipeline, sbt);
	}

 protected:
	OptixEngine(const PropertyService& properties, const OptixConfig& config);

	PropertyService properties;
	OptixConfig config;
	OptixRenderer renderer;
	ContextHandle ctx = nullptr;
	OptixPipeline pipeline = nullptr;
	OptixShaderBindingTable sbt = {};
	OptixTraversableHandle gas_handle = 0;
	
	char log[2048]; // For error reporting from OptiX creation functions
	size_t sizeof_log = sizeof(log);

}; // end class OptixEngine
