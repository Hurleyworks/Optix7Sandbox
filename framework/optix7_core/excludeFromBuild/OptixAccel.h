// This header file was auto-generated by ClassMate++
// Created: 12 Sep 2019 6:29:23 am
// Copyright (c) 2019, HurleyWorks

#pragma once

class OptixAccel
{

 public:
	OptixAccel ();
	~OptixAccel ();

	void preallocate(ContextHandle& context);
	void rebuildSceneAccel(ContextHandle& context, const SceneMeshes& meshes, bool justUpdate = false);

	OptixTraversableHandle getIAS() const { return IAS; }
	
 private:
	CUdeviceptr deviceIAS = 0;
	OptixTraversableHandle IAS = 0;
	OptixAccelBufferSizes IASbufferSizes;
	CUdeviceptr deviceTempBuffer = 0;

	size_t instanceCount = DEFAULT_PREALLOCATED_MESHES_COUNT;
	std::vector<OptixInstance> optixInstances;
	CuBuffer<OptixInstance> deviceInstances;

	OptixAccelBuildOptions accelOptions = {};
	OptixBuildInput instanceInput = {};
	
	void updateInstanceTransforms(const SceneMeshes& meshes);

}; // end class OptixAccel
