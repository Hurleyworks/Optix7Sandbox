// This header file was auto-generated by ClassMate++
// Created: 10 Feb 2018 9:21:04 am
// Copyright (c) 2018, HurleyWorks

#pragma  once

struct MeshBuffers
{
	Surfaces S;   // collection of triangles with different materials
	MatrixXf V;   // vertices
	MatrixXf N;   // vertex normals

	size_t faceCount = 0; // must be computed
	size_t pointCount() { return V.cols(); }
	size_t triangleCount() { return faceCount; }
	
	void reset()
	{
		V.resize(3, 0);
		N.resize(3, 0);
		S.clear();
	}

	void getAllSurfaceIndices(MatrixXu & allIndices)
	{
		faceCount = 0;
		for (auto s : S)
		{
			faceCount += s.triangleCount();
		}

		allIndices.resize(3, faceCount);

		int index = 0;
		for (auto s : S)
		{
			size_t triCount = s.triangleCount();

			for (int i = 0; i < triCount; i++)
				allIndices.col(index++) = s.indices().col(i);
		}
	}
};

using MeshBuffersHandle = std::shared_ptr<MeshBuffers>;