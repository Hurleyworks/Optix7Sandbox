// This header file was auto-generated by ClassMate++
// Created: 29 Dec 2018 1:52:03 pm
// Copyright (c) 2018, HurleyWorks

#pragma  once

class WorldItem : public Renderable
{

 public:
	static RenderableNode create() { return std::make_shared<WorldItem>(); }

 public:
	WorldItem();
	~WorldItem();

	bool isInstance() const override { return instancedFrom.lock() != nullptr; }
	void setInstancedFrom(RenderableNode & node) override { instancedFrom = node; }
	RenderableNode getInstancedFrom() override { return instancedFrom.expired() ? nullptr : instancedFrom.lock();}
	RenderableNode createInstance() override;
	size_t getNumberOfInstances() const override { return instanceCount; }
	virtual const RenderableData getData() const
	{
		RenderableData d;
		d.clientID = clientID;
		d.sourceID = instancedFrom.expired() ? INVALID_ID : instancedFrom.lock()->getID();
		d.desc = desc;
		d.mesh = mesh;
		d.name = name;
		d.sceneID = id();
		d.spacetime = spacetime;
		d.state = state;

		return d;
	}

 private:
	RenderableWeakRef instancedFrom;
	size_t instanceCount = 0;
	
}; // end class WorldItem
