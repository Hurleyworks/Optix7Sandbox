// This header file was auto-generated by ClassMate++
// Created: 11 Sep 2019 6:50:03 pm
// Copyright (c) 2019, HurleyWorks

#pragma once


using tinygltf::Node;
using tinygltf::Mesh;
using tinygltf::Buffer;
using sabi::Images;
using sabi::MeshBuffersHandle;

using LoadMeshCallback = std::function<void(MeshBuffersHandle, std::string)>;
using LoadImagesCallback = std::function<void(Images)>;

class glTFLoader
{
	
 public:
	 glTFLoader() = default;
	 ~glTFLoader() = default;

	 void loadGeometry(const std::string& path, LoadMeshCallback meshCallback);
	 void loadAll(const std::string& path, LoadImagesCallback imageCallback, LoadMeshCallback meshCallback);
	 
 private:
	 tinygltf::Model model;
	 LoadMeshCallback meshCallback = nullptr;
	 LoadImagesCallback imageCallback = nullptr;
	 std::string filePath;
	 
	 void processNodes();
	 void processImages();
	 void processMesh(Node& node, Mesh& mesh, LoadMeshCallback meshCallback);
	 void getTextureCoords_0(const Node& node, const int32_t accessorIndex, MeshBuffersHandle& m);
	 void getNormals(const Node& node, const int32_t accessorIndex, MeshBuffersHandle& m);
	 void getVertices(const Node& node, const int32_t accessorIndex, MeshBuffersHandle& m);
	 void getIndices(const Node& node, const int32_t accessorIndex, MeshBuffersHandle& m);

}; // end class glTFLoader
