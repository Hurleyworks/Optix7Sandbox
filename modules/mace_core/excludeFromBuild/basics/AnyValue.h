// This header file was auto-generated by ClassMate++
// Created: 22 Feb 2019 8:55:26 pm
// Copyright (c) 2019, HurleyWorks

#pragma  once

// store and retrieve any type from a map
template <class PROPERTY>
class AnyValue
{
	using ValueMap = std::unordered_map<int, Poco::Any>;

public:
	AnyValue() = default;
	~AnyValue() = default;

	void addDefault(const PROPERTY & key, const Poco::Any & value) { map_.insert(std::make_pair(key, value)); }
	void setValue(const PROPERTY & key, const Poco::Any & value)
	{
		auto it = map_.find(key);
		if (it == map_.end())
			map_.insert(std::make_pair(key, value));
		else
			it->second = value;
	}

	template <typename T>
	T & getRef(const PROPERTY & key) { return Poco::AnyCast<T>(getValue(key)); }

	template <typename T>
	T getVal(const PROPERTY & key) { return Poco::AnyCast<T>(getValue(key)); }

	template <typename T>
	T* getPtr(const PROPERTY & key) { return Poco::AnyCast<T>(&getValue(key)); }

private:
	ValueMap map_;
	Poco::Any empty_;

	Poco::Any & getValue(const PROPERTY & key)
	{
		auto it = map_.find(key);
		if (it != map_.end())
			return it->second;

		return empty_;
	}

}; // end class AnyValue